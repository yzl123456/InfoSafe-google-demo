package test_S_KEY;

import java.util.Scanner;

/**
 * 以下摘自维基百科
 * The server is the computer that will perform the authentication.
 * 1.This step begins with a secret key W. This secret can either be provided by the user, 
 * or can be generated by a computer. Either way, if this secret is disclosed, then the security of S/KEY is compromised.
 * 2.A cryptographic hash function H is applied n times to W, thereby producing a hash chain of n one-time passwords. 
 * The passwords are the results of the application of the cryptographic hash function:H(W), H(H(W)), ..., Hn(W).
 * 3.The initial secret W is discarded.
 * 4.The user is provided with the n passwords, printed out in reverse order:Hn(W), Hn−1(W), ..., H(H(W)), H(W)
 * 5.The passwords H(W), H(H(W)), ..., Hn−1(W) are discarded from the server. Only the password Hn(W), 
 * the one at the top of the user's list, is stored on the server.
 */
public class Test {
	//用户注册时在服务端生成的MD5字符串
	private static String getServerMD5String(String tmp,int time){
		while(time--!=0){
			tmp=MD5.stringMD5(tmp);
		}
		return tmp;
	}
	
	
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		String registPassword="abc123";
		//假设一轮S/KEY 能够输入密码的次数为1e5（100000）次,得到服务端保存的MD5
		//此处直接将用户注册时的密码当做W，服务器端存的是Hn(W) ，服务器端还得存用户的登陆次数
		String serverMD5String=getServerMD5String(registPassword, 100000);
		//模拟用户登陆次数
		int userLoginTime=1;
		
		
		while(true){
		System.out.println("请输入登陆密码:");
		String inputPassword=in.nextLine();
		
		int prepareHashTime=100000-userLoginTime;
		while(prepareHashTime--!=0){
			inputPassword=MD5.stringMD5(inputPassword);
		}

		System.out.println("用户已登录"+userLoginTime+"次");
		System.out.println("此时服务端所存的MD5字符串:-->"+serverMD5String);
		//进行的最后一次MD5，如果Hash之后与服务器端的一致，则用此字符串替换服务器端字符串，同时登陆次数+1
		if(MD5.stringMD5(inputPassword).equals(serverMD5String)){
			System.out.println("登陆成功");
			serverMD5String=inputPassword;userLoginTime++;
		}
		else System.out.println("登陆失败");
		
		}
	}
}
